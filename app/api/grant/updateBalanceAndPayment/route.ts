import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const { user_id, grant_duration } = await req.json();

    if (!user_id || !grant_duration) {
      return NextResponse.json(
        { error: "user_id –∏ grant_duration –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
    const amountToAdd = 329 * grant_duration;
    console.log("üìå –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: user_id =", user_id, "—Å—É–º–º–∞ =", amountToAdd);

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const newPayment = await prisma.payment.create({
      data: {
        UserID: user_id, // –ü–æ–ª–µ UserID, –∫–∞–∫ –≤ —Å—Ö–µ–º–µ Prisma
        amount: amountToAdd,
        status: "succeeded",
      },
    });

    console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:", newPayment);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: user_id },
      data: {
        balance: { increment: amountToAdd },
      },
    });

    console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", updatedUser.balance);

    return NextResponse.json({
      message: "–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –∏ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
      updatedBalance: updatedUser.balance,
      payment: newPayment,
    });
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error);

    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: error.message },
      { status: 500 }
    );
  }
}
