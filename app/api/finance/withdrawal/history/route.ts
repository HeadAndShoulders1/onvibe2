import { NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { prisma } from "@/lib/prisma";

export async function GET(req: Request) {
  const session = await getServerSession(authOptions);

  if (!session || !session.user || !session.user.email) {
    return NextResponse.json({ error: "unauthorized" }, { status: 401 });
  }

  try {
    // üîç –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
      select: { id: true },
    });

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }

    // üìú –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤
    const withdrawals = await prisma.withdrawal.findMany({
      where: { user_id: user.id }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π id
      select: {
        id: true,
        amount: true,
        created_at: true, // –ï—Å–ª–∏ –ø–æ–ª–µ –≤ –±–∞–∑–µ `createdAt`, –∏–∑–º–µ–Ω–∏ —Ç—É—Ç
        status: true,
      },
      orderBy: { created_at: "desc" },
    });

    // üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt ‚Üí Number
    const formattedWithdrawals = withdrawals.map(w => ({
      ...w,
      id: Number(w.id), // id –≤ Number
      amount: Number(w.amount), // —Å—É–º–º–∞ –≤ Number
    }));

    return NextResponse.json(formattedWithdrawals);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏" }, { status: 500 });
  }
}
